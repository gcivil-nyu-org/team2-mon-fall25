# .travis.yml for CollabDesk (Frontend + Backend unified CI/CD)
dist: jammy
os: linux
language: python
python:
  - "3.11"

# Run jobs in parallel (matrix build)
jobs:
  include:
    # ===== Backend Job =====
    - stage: Backend Tests & Deploy
      name: "Backend: Django + Python 3.11"
      before_install:
        - cd backend/collabdesk
        - python -m venv venv        
        - source venv/bin/activate        
        - python -m pip install --upgrade pip setuptools wheel
      install:
        - pip install -r requirements.txt
        - pip install black flake8 coverage coveralls
      script:
        # Formatting and lint checks
        - black --check .
        - flake8 .
        # Run tests with coverage
        - coverage run manage.py test --keepdb
        - coverage report
      after_success:
        - coveralls
      deploy:
        - provider: elasticbeanstalk
          region: "us-east-1"
          app: "collabdesk-backend"
          env: "collabdesk-backend-dev"
          bucket_name: "elasticbeanstalk-us-east-1-861276083927"
          # bucket_path: "collabdesk-frontend-dev"
          on:
            branch: develop
          access_key_id: $AWS_ACCESS_KEY_ID
          secret_access_key: $AWS_SECRET_ACCESS_KEY

        - provider: elasticbeanstalk
          region: "us-east-1"
          app: "collabdesk-backend"
          env: "collabdesk-backend-prod"
          bucket_name: "elasticbeanstalk-us-east-1-861276083927"
          # bucket_path: "collabdesk-frontend-prod"
          on:
            branch: main
          access_key_id: $AWS_ACCESS_KEY_ID
          secret_access_key: $AWS_SECRET_ACCESS_KEY

    # ===== Frontend Job =====
    - stage: Frontend Tests & Deploy
      name: "Frontend: React + Node 20"
      language: node_js
      node_js:
        - "20"
      cache:
        directories:
          - frontend/node_modules
      before_install:
        - cd frontend
        - npm install -g corepack
        - corepack enable
        - corepack prepare pnpm@10 --activate
      install:
        - pnpm install --frozen-lockfile
      script:
        - pnpm run lint || echo "No lint script found"
        - pnpm run test
      after_success:
        - echo "Frontend tests completed successfully"
    - stage: build and deploy (dev)
      if: branch = develop
      name: "Deploy Integration"
      env:
        - ENV_FILE=frontend/.env.development
        - S3_BUCKET=collabdesk-frontend-dev
        - CF_DIST_ID=E1Q11CVWLLP2KA
      script:
        - echo "Using $ENV_FILE for build"
        - cp $ENV_FILE .env          # ðŸ‘ˆ copy correct env file to .env
        - npm ci
        - npm run build
        - aws sts get-caller-identity
        - aws s3 sync build/ s3://$S3_BUCKET --delete
        - aws cloudfront create-invalidation --distribution-id $CF_DIST_ID --paths "/*"
    - stage: build and deploy (prod)
      if: branch = main
      name: "Deploy Production"
      env:
        - ENV_FILE=frontend/.env.production
        - S3_BUCKET=collabdesk-frontend-prod
        - CF_DIST_ID=E2MB4YPO4KNA31
      script:
        - echo "Using $ENV_FILE for build"
        - cp $ENV_FILE .env          # ðŸ‘ˆ same trick
        - npm ci
        - npm run build
        - aws sts get-caller-identity
        - aws s3 sync build/ s3://$S3_BUCKET --delete
        - aws cloudfront create-invalidation --distribution-id $CF_DIST_ID --paths "/*"


# # Notifications
# notifications:
#   email:
#     recipients:
#       - sr7731@nyu.edu
#     on_success: always
#     on_failure: always
